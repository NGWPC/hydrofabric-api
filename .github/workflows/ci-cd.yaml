name: Hydrofabric CI/CD

on:
  push:
    branches: [ main, 'feature/actions' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ngwpc/hydrofabric_api/hydrofabric

jobs:
  build_and_test:
    name: Build and Test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract reference info
        id: ref_info
        run: |
          # Handle both branch pushes and releases
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # For releases, use the release tag
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "type=release" >> $GITHUB_OUTPUT
          else
            # For branch pushes
            echo "tag=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
            echo "type=branch" >> $GITHUB_OUTPUT
          fi
      
      # First, build from scratch for testing
      - name: Build testing Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile  # This will be a standalone Dockerfile with no dependencies
          push: false
          load: true
          tags: hydrofabric-test-image:${{ github.sha }}
      
      # Run tests on the freshly built image with the latest changes
      - name: Run tests in container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            hydrofabric-test-image:${{ github.sha }} \
            /bin/bash -c "pip install pytest pytest-django coverage && coverage run -m pytest tests/unit --junitxml=/workspace/test-results.xml && coverage xml -o /workspace/coverage.xml"
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml
      
      # Only if tests pass, build and push the final image
      - name: Build and push final Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile  # Same full Dockerfile
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }}
      
      # Apply additional tags if needed
      - name: Tag development (for main branch)
        if: steps.ref_info.outputs.type == 'branch' && github.ref == 'refs/heads/main'
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }}
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:development
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:development
      
      - name: Handle version tags
        if: (steps.ref_info.outputs.type == 'branch' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))) || steps.ref_info.outputs.type == 'release'
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }}
          
          # Tag with version from VERSION file if it exists
          if [ -f VERSION ]; then
            VERSION_TAG=$(cat VERSION)
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
          else
            echo "WARNING: VERSION file not found, skipping version tagging"
          fi
          
          # Tag as latest for main, release branches, or release events
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      
      # Ensure package privacy
      - name: Ensure package privacy
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh api --method PATCH /user/packages/container/${{ env.IMAGE_NAME }} \
            -f visibility='private' || echo "Couldn't set visibility, please check package settings"
