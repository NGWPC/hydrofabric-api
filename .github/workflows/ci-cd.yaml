name: Hydrofabric CI/CD

on:
  push:
    branches: [ main, 'test_actions' ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ngwpc/Hydrofabric_API/hydrofabric
  VISIBILITY: private

jobs:
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract reference info
        id: ref_info
        run: |
          # Handle both branch pushes and releases
          if [[ "${{ github.event_name }}" == "release" ]]; then
            # For releases, use the release tag
            echo "tag=${{ github.event.release.tag_name }}" >> $GITHUB_OUTPUT
            echo "type=release" >> $GITHUB_OUTPUT
          else
            # For branch pushes
            echo "tag=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
            echo "type=branch" >> $GITHUB_OUTPUT
          fi
      
      - name: Build Docker image (locally only)
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: false
          load: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }}
      
      - name: Save Docker image for testing
        run: |
          docker save ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} > /tmp/image.tar
      
      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-image
          path: /tmp/image.tar
          retention-days: 1
          
      - name: Store reference info for later jobs
        run: |
          mkdir -p /tmp/ref_info
          echo "${{ steps.ref_info.outputs.tag }}" > /tmp/ref_info/tag
          echo "${{ steps.ref_info.outputs.type }}" > /tmp/ref_info/type
          
      - name: Upload reference info artifact
        uses: actions/upload-artifact@v4
        with:
          name: ref-info
          path: /tmp/ref_info
          retention-days: 1

  unit_test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: build
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
      
      - name: Download reference info
        uses: actions/download-artifact@v4
        with:
          name: ref-info
          path: /tmp/ref_info
          
      - name: Load reference info
        id: ref_info
        run: |
          TAG=$(cat /tmp/ref_info/tag)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
      
      - name: Load Docker image
        run: |
          docker load < /tmp/image.tar
      
      - name: Run tests in container
        run: |
          docker run --rm \
            -v ${{ github.workspace }}:/workspace \
            -w /workspace \
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} \
            /bin/bash -c "pip install pytest pytest-django coverage && coverage run -m pytest tests/unit --junitxml=/workspace/test-results.xml && coverage xml -o /workspace/coverage.xml"
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml

  push:
    name: Push Docker Image
    runs-on: ubuntu-latest
    needs: unit_test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Download Docker image
        uses: actions/download-artifact@v4
        with:
          name: docker-image
          path: /tmp
          
      - name: Download reference info
        uses: actions/download-artifact@v4
        with:
          name: ref-info
          path: /tmp/ref_info
          
      - name: Load reference info
        id: ref_info
        run: |
          TAG=$(cat /tmp/ref_info/tag)
          TYPE=$(cat /tmp/ref_info/type)
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "type=$TYPE" >> $GITHUB_OUTPUT
      
      - name: Load Docker image
        run: |
          docker load < /tmp/image.tar
      
      - name: Push Docker image with tag
        run: |
          # Push with the tag from the branch name or release tag
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }}
      
      - name: Handle additional tags for branches
        if: steps.ref_info.outputs.type == 'branch' && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/'))
        run: |
          if [ -f VERSION ]; then
            VERSION_TAG=$(cat VERSION)
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${VERSION_TAG}
          else
            echo "WARNING: VERSION file not found, skipping version tagging"
          fi
          
          # Tag as latest for main or release branches
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      
      - name: Handle additional tags for releases
        if: steps.ref_info.outputs.type == 'release'
        run: |
          # For releases, also tag as "latest"
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.ref_info.outputs.tag }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
      
      # Single privacy check for the whole package
      - name: Ensure package privacy
        run: |
          echo ${{ secrets.GITHUB_TOKEN }} | gh auth login --with-token
          gh api --method PATCH /user/packages/container/${{ env.IMAGE_NAME }} \
            -f visibility='private' || echo "Couldn't set visibility, please check package settings"
