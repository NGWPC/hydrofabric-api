name: Hydrofabric CI/CD

on:
  push:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ngwpc/hydrofabric_internal/hydrofabric_internal

jobs:
  unit_test:
    name: Unit Tests
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/ngwpc/hydrofabric_internal/hydrofabric_internal:development
      credentials:
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        run: |
          dnf install -y python311 python3.11-pip python3.11-devel
          update-alternatives --install /usr/bin/python python /usr/bin/python3.11 1
          dnf remove pip -y
          update-alternatives --install /usr/bin/pip pip /usr/bin/pip3.11 1
      
      - name: Install dependencies
        run: |
          pip install -r requirements.txt
          pip install pytest pytest-django coverage
      
      - name: Run tests with coverage
        run: |
          coverage run -m pytest tests/unit --junitxml=test-results.xml
          coverage xml
      
      - name: Upload test results
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: |
            test-results.xml
            coverage.xml

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: unit_test
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=sha,format=short
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  container_scanning:
    name: Container Scanning
    runs-on: ubuntu-latest
    needs: build
    permissions:
      contents: read
      security-events: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.branch }}
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'LOW,MEDIUM,HIGH,CRITICAL'
          timeout: '20m'
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  deploy:
    name: Deploy Docker Image
    runs-on: ubuntu-latest
    needs: container_scanning
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract branch name
        id: extract_branch
        shell: bash
        run: echo "branch=${GITHUB_REF#refs/heads/}" >> $GITHUB_OUTPUT
      
      - name: Check VERSION file
        id: check_version
        run: |
          if [ ! -f VERSION ]; then 
            echo "VERSION file not found!"
            exit 1
          fi
          echo "version_tag=$(cat VERSION)" >> $GITHUB_OUTPUT
      
      - name: Tag and push with version
        run: |
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.branch }}
          
          # Tag with version from VERSION file
          docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.branch }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.check_version.outputs.version_tag }}
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.check_version.outputs.version_tag }}
          
          # Tag as latest for main or release branches
          if [[ "${{ steps.extract_branch.outputs.branch }}" == "main" || "${{ steps.extract_branch.outputs.branch }}" == release/* ]]; then
            docker tag ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.extract_branch.outputs.branch }} ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
          fi
