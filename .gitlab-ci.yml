include:
  - template: Jobs/Container-Scanning.gitlab-ci.yml

stages:
  - lint
  - unit_test
  - sonarqube
  - build
  - test
  - deploy

image: registry.sh.nextgenwaterprediction.com/infrastructure/docker/docker:26.0.2

variables:
    DOCKER_IMAGE_NAME: $CI_REGISTRY_IMAGE
    DOCKER_IMAGE_TAG: $CI_COMMIT_REF_NAME
    TARGET_VERSION: "0.0.1" # Does Hydro API have any concept of versioning?

lint:
  stage: lint
  image: registry.sh.nextgenwaterprediction.com/infrastructure/rockylinux/rockylinux:9.3
  before_script:
    - dnf install -y python pip
    #- pip install .[testing] --index-url ${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple
    - pip install pytest flake8
  script:
    - flake8 . --max-line-length=120
  allow_failure: true

unit_test:
  stage: unit_test
  image: registry.sh.nextgenwaterprediction.com/infrastructure/rockylinux/rockylinux:9.3
  before_script:
    - dnf install -y python pip
  script:
    - pip install . --index-url ${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple
    - pip install .[testing] --index-url ${CI_SERVER_PROTOCOL}://gitlab-ci-token:${CI_JOB_TOKEN}@${CI_SERVER_HOST}/api/v4/projects/${CI_PROJECT_ID}/packages/pypi/simple
    - coverage run -m pytest --junitxml=test-results.xml
    - coverage xml
  artifacts:
    paths:
      - coverage.xml
    reports:
      junit: test-results.xml
  allow_failure: true

analyze:sonar:
  stage: sonarqube
  image:
    name: registry.sh.nextgenwaterprediction.com/infrastructure/sonar-scanner-cli/sonar-scanner-cli:5.0.1
    entrypoint: [""]
  variables:
    # Defines the location of the analysis task cache
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"
    # Shallow cloning needs to be disabled.
    # See https://docs.sonarqube.org/latest/analysis/gitlab-cicd/.
    GIT_DEPTH: 0
  cache:
    key: "${CI_JOB_NAME}"
    paths:
      - .sonar/cache
  script:
    - sonar-scanner -X -Dsonar.verbose=true

build:
  stage: build
  script:
    - echo "Logging in to Gitlab Container Registry..."
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - echo "Building test Rocky Linux container... "
    - echo docker build -f Dockerfile-gitlab -t $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG .
    - docker build -t "$DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG" .
    - docker push $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG
    - docker logout

container_scanning:
  stage: test
  needs:
    - build
  variables:
    SECURE_LOG_LEVEL: info
    CS_SEVERITY_THRESHOLD: UNKNOWN
    CS_IMAGE: $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG


deploy_image:
  stage: deploy
  script:
    - echo "Logging in to Gitlab Container Registry, to push the image."
    - echo $CI_JOB_TOKEN | docker login -u $CI_REGISTRY_USER --password-stdin $CI_REGISTRY
    - docker tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_IMAGE_NAME:latest
    - docker push $DOCKER_IMAGE_NAME:latest
    - docker tag $DOCKER_IMAGE_NAME:$DOCKER_IMAGE_TAG $DOCKER_IMAGE_NAME:$TARGET_VERSION
    - docker push $DOCKER_IMAGE_NAME:$TARGET_VERSION
    - docker logout
  only:
    - main




